<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bitcamp.devlog.mapper.PostMapper">
    <resultMap id="postMap" type="Post">
        <id column="post_id" property="postId"/>
        <result column="post_id" property="postId"/>
        <result column="category_id" property="categoryId"/>
        <result column="p_created_at" property="pCreatedAt"/>
        <result column="p_updated_at" property="pUpdatedAt"/>
        <result column="p_content" property="pContent"/>
        <result column="hits" property="hits"/>
        <result column="open_type" property="openType"/>
        <result column="post_url" property="postUrl"/>
        <result column="title" property="title"/>
        <result column="account_id" property="accountId"/>
        <result column="file" property="file"/>
        
        <collection property="postTags" resultMap="postTagMap" />
    </resultMap>

    <resultMap id="postTagMap" type="PostTagJoin">
        <result column="post_id" property="postId"/>
        <result column="tag_id" property="tagId"/>
        <result column="tag_name" property="tagName"/>
    </resultMap>

    <insert id="save" parameterType="Post" useGeneratedKeys="true" keyProperty="postId">
        insert into post
        (category_id,p_created_at,p_content,open_type,post_url,title,account_id,file)
        values
        (#{categoryId},now(),#{pContent},#{openType},#{postUrl},#{title},#{accountId},#{file})
    </insert>

    <update id="update" parameterType="Post">
        update post
        set
            category_id = #{categoryId},
            p_updated_at = now(),
            p_content = #{pContent},
            open_type = #{openType},
            title = #{title},
            file = #{file}
        where
            post_id = #{postId}
    </update>

    <delete id="delete" parameterType="Post">
        delete from post
        where post_id = #{postId}
    </delete>

    <select id="findBypostUrl" parameterType="String" resultMap="postMap">
        select
            p.post_id as post_id,
            category_id,
            p_created_at,
            p_updated_at,
            p_content,
            hits,
            open_type,
            post_url,
            title,
            p.account_id as account_id,
            p.file as file,
            tag_id,
            tag_name,
            a.homepage as homepage
        from post p left outer join post_tag_join ptj on p.post_id = ptj.post_id
        join account a on a.account_id = p.account_id
        where p.post_url = #{postUrl}
    </select>

    <!--태그검색-->
    <select id="findByPostIdAndAccountId" parameterType="long" resultType="Post">
        select *
        from post
        where post_id = #{postId}
          and account_id = #{accountId}
    </select>

    <select id="findAllByAccountId" parameterType="long" resultType="Post">
        select *
        from post
        where account_id = #{accountId}
    </select>

    <!--제목검색-->
    <select id="findAllByTitleAndAccountId" parameterType="Post">
        select *
        from post
        where title=#{title}
          and account_id = #{accountId}
    </select>

    <!--랜덤포스트리스트    -->
    <select id="findRandomPosts" resultType="map">
        SELECT p.*, a.homepage
        FROM (
                 SELECT *
                 FROM post
                 ORDER BY RAND()
                 LIMIT 20
             ) p
                 JOIN account a ON p.account_id = a.account_id;
    </select>

    <select id="findByHomePage" parameterType="String" resultType="Post">
        select * from post p join account a on p.account_id = a.account_id
        where a.homepage = #{homepage}
    </select>

    <delete id="deleteByPostUrl" parameterType="String">
        delete from post
        where post_url=#{postUrl}

    </delete>
    <!--수정페이지 포스트 가져오기-->
    <select id="findByPostUrl" parameterType="String" >
        select * from post
        where post_url = #{postUrl}
    </select>


    <select id="findPostIdByPostUrl" parameterType="String" resultType="long">
        select post_id from post
        where post_url = #{postUrl}
    </select>


    <select id="findAllByAccountIdLong" parameterType="long" resultType="Post">

        select * from post
        where account_id = #{accountId} order by p_created_at desc
        limit 4
    </select>

    <select id="findAccountIdByPostId" parameterType="long" resultType="long">
        select account_id from post
        where post_id = #{postId}
    </select>

    <select id="deleteByPostId" parameterType="long">
        delete from post
        where post_id = #{postId};
    </select>

    <select id="findPostUrlByPostId" parameterType="long" resultType="String">
        select post_url from post
        where post_id = #{postId}
    </select>


    <update id="updateHitsByPostid" parameterType="Long">
        update post set hits=hits+1 where post_id=#{postId}
    </update>

    <select id="findHitsByPostid" parameterType="Long" resultType="Long">
        SELECT SUM(hits) as total_hits
        FROM post
        WHERE account_id = #{accountId}
        GROUP BY account_id
    </select>

    <select id="findByCategoryIdAndAccountId" parameterType="long" resultType="Post">
        select * from post where category_id=#{categoryId} and account_id = #{accountId}
    </select>

    <select id="findHitsByHomepage" parameterType="String" resultType="long">

        select sum(hits) from post p join account a on p.account_id = a.account_id
        where a.homepage=#{homepage}
    </select>
</mapper>

